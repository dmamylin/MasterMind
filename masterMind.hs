--Мамылин Дмитрий, группа: МТ-202. Задача на зачет по КН: Master Mind.

{-Очень хотелось реализовать ввод/вывод с минимумом нажатий клавиши Enter,
но под Windows GHC не позволяет: https://ghc.haskell.org/trac/ghc/ticket/2189
Вспомнилась очень удобная библиотека (только под Windows, к сожалению),
из языка C - <conio.h>. В связке с расширением FFI задача разрешилась.-}

{-# LANGUAGE ForeignFunctionInterface #-}
import Foreign.C
import System.Cmd(system)
import System.IO
import Data.Char(chr, isDigit)
import System.Random(randomRIO)

foreign import ccall unsafe "conio.h getch" c_getch :: IO Int

---------"Ресурсы" игры:---------
resStrAbout    = "Author: Mamylin Dmitry, IMCS URFU, 2013"
resStrInit     = "Welcome to Master Mind!"
resStrHelp     = "Mastermind or Master Mind is a code-breaking \
                  \game for two players. \nThe modern game with \
                  \pegs was invented in 1970 by Mordecai Meirowitz,\
                  \an Israeli postmaster and telecommunications expert.\n\n\
                  \In this realisation, your goal - break code that was \
                  \generated by computer -\nthe first player."
resStrGetLen   = "Enter length of sequence (positive integer): "
resStrEnter    = "Your turn: "
resStrWin      = "Victory!"
resStrGen      = "Sequence generated seccessfully."
resStrMenuMain = "Press buttons (1) - (4) to:\n1. Start\n2. Help\n3. About\n4. Exit"
resStrMenuBack = "1. Back to menu"
resStrExit     = "Goodbye!"

---------"Чистые" функции:---------
valueError :: Show a => a -> String
valueError val = "Bad value: " ++ show val ++ " Try again!"

showAnswer :: (Int, Int) -> String
showAnswer (matched, inSeq) =
    "Matched: " ++ show matched ++ "; in sequence: " ++ show inSeq

isNumber :: String -> Bool
isNumber = and . map isDigit

matchSeq :: String -> String -> (Int, Int)
{-Принимает 2 строки (последовательности). s1 - загаданная, s2 - ранее введенная пользователем.
Формирует пару (a, b), где a - количество совпавших символов s1 и s2,
b - количество присутствующих символов из s2 в s1 без учета совпавших.-}
matchSeq s1 s2 =
    (matched, sum $ map add a2)
    where
        (a1, a2, matched) = foldl merge ("", "", 0) $ zipWith intersect s1 s2
        add x = if x `elem` a1 then 1 else 0
        intersect a b = if a == b then ("", "", 1) else ([a], [b], 0)
        merge (x1, x2, x3) (y1, y2, y3) = (x1 ++ y1, x2 ++ y2, x3 + y3)        

---------Функции ввода/вывода:---------
getCh :: IO Char
getCh = do --"Обертка" для сишного getch().
    code <- c_getch
    return $ chr code

getSeqLen :: IO Int
getSeqLen = do --Запрашивает у пользователя длину последовательности.
    putStr resStrGetLen
    len <- getLine
    if isNumber len && (read len :: Int) > 0
    then return $ (read len :: Int)
    else do { putStrLn $ valueError len; getSeqLen }
    
genSeq :: Int -> IO String --Генерирует последовательность заданной длины.
genSeq len = mapM randomRIO $ replicate len ('0', '9')

getSeq :: Int -> IO String
getSeq len = do --Запрашивает у пользователя последовательность.
    putStr resStrEnter
    sq <- getLine
    if isNumber sq && len == length sq
    then return sq
    else do putStrLn $ (valueError sq) ++ " Expected length: " ++ show len
            getSeq len 
    
gameLoop :: Int -> String -> IO ()
gameLoop len seq = do --"Зацикливает" ввод/вывод результата.
    input <- getSeq len
    if seq == input
    then do backKeyMenu $ resStrWin ++ " Sequence = " ++ seq
    else do putStrLn $ showAnswer $ matchSeq seq input
            gameLoop len seq

backKeyMenu :: String -> IO ()
backKeyMenu info = do --Удобный шаблон для создания "однокнопочных" меню.
    system "cls"
    putStrLn info
    putStrLn resStrMenuBack
    checkAnswer
    where checkAnswer = do
            key <- getCh
            case key of
                '1' -> do { system "cls"; menuMain }
                _   -> checkAnswer

menuMain :: IO ()
menuMain = do
    putStrLn resStrMenuMain
    checkAnswer
    where checkAnswer = do
            key <- getCh
            case key of
                '1' -> do system "cls";
                          len <- getSeqLen
                          seq <- genSeq len
                          putStrLn resStrGen
                          gameLoop len seq
                '2' -> backKeyMenu resStrHelp
                '3' -> backKeyMenu resStrAbout
                '4' -> putStrLn resStrExit
                _   -> checkAnswer

--Самая неприметная - главная функция; чистит экран, вызывает меню.
main = do
    system "cls"
    putStrLn resStrInit
    menuMain
